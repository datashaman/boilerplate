{"version":3,"sources":["home.cjsx"],"names":[],"mappings":"AAAA,YAAA,CAAA;AAAA,MAEM,CAAC,MAAP,CAAc,QAAd,CAAuB,CAAC,KAAxB,CAA8B,SAAC,CAAD,GAAA;AAC5B,MAAA,6CAAA;AAAA,EAAA,YAAA,GAAe,MAAM,CAAC,YAAtB,CAAA;AAAA,EACA,KAAA,GAAQ,MAAM,CAAC,KADf,CAAA;AAAA,EAEA,CAAA,GAAI,MAAM,CAAC,CAFX,CAAA;AAAA,EAGA,IAAA,GAAO,MAAM,CAAC,IAHd,CAAA;AAAA,EAIA,KAAA,GAAQ,MAAM,CAAC,KAJf,CAAA;AAAA,EAMA,QAAA,GAAW,KAAK,CAAC,WAAN,CACT;AAAA,IAAA,iBAAA,EAAmB,SAAA,GAAA;AACjB,MAAA,IAAI,CAAC,SAAL,CAAA,CAAA,CAAA;aACA,KAFiB;IAAA,CAAnB;AAAA,IAIA,kBAAA,EAAoB,SAAA,GAAA;AAClB,MAAA,IAAG,IAAI,CAAC,KAAK,CAAC,QAAd;AACE,QAAA,IAAI,CAAC,KAAK,CAAC,OAAX,GAAyB,IAAA,MAAM,CAAC,OAAP,CAAA,CAAgB,CAAC,IAAjB,CAAsB,QAAQ,CAAC,cAAT,CAAwB,QAAxB,CAAtB,CAAzB,CADF;OAAA,MAAA;AAGE,QAAA,IAAG,IAAI,CAAC,KAAK,CAAC,OAAd;AACE,UAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAnB,CAAA,CAAA,CAAA;AAAA,UACA,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB,IADrB,CADF;SAHF;OAAA;aAMA,KAPkB;IAAA,CAJpB;AAAA,IAaA,oBAAA,EAAsB,SAAA,GAAA;AACpB,MAAA,IAAG,IAAI,CAAC,KAAK,CAAC,OAAd;AACE,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAnB,CAAA,CAAA,CADF;OAAA;aAEA,KAHoB;IAAA,CAbtB;AAAA,IAkBA,eAAA,EAAiB,SAAA,GAAA;AACf,UAAA,KAAA;AAAA,MAAA,KAAA,GAAY,IAAA,IAAA,CAAA,CAAZ,CAAA;aAEA;AAAA,QAAA,KAAA,EAAO,KAAK,CAAC,GAAN,CAAU,OAAV,EAAmB,CAAC,CAAC,KAAF,CAAQ,IAAI,CAAC,KAAb,CAAnB,CAAP;AAAA,QACA,OAAA,EAAS,KAAK,CAAC,GAAN,CAAU,SAAV,EAAqB,yBAArB,CADT;AAAA,QAEA,KAAA,EAAO,IAAI,CAAC,MAAO,CAAA,KAAK,CAAC,QAAN,CAAA,CAAA,CAFnB;AAAA,QAGA,QAAA,EAAU,IAHV;AAAA,QAIA,MAAA,EAAQ,EAJR;AAAA,QAKA,QAAA,EAAU,EALV;AAAA,QAMA,OAAA,EAAS,IANT;QAHe;IAAA,CAlBjB;AAAA,IA6BA,eAAA,EAAiB,SAAC,IAAD,GAAA;aACf,CAAA,SAAA,KAAA,GAAA;eAAA,SAAA,GAAA;AACE,cAAA,GAAA;AAAA,UAAA,GAAA,GAAM,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAjB,CAAyB,IAAzB,CAAN,CAAA;AACA,UAAA,IAAG,GAAA,KAAO,CAAA,CAAV;AACE,YAAA,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAjB,CAAsB,IAAtB,CAAA,CADF;WAAA,MAAA;AAKE,YAAA,IAAgB,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAjB,KAA2B,CAA3C;AAAA,qBAAO,KAAP,CAAA;aAAA;AAAA,YAEA,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAjB,CAAwB,GAAxB,EAA6B,CAA7B,CAFA,CALF;WADA;AAAA,UAUA,KAAA,CAAM,OAAN,EAAe,KAAI,CAAC,KAAK,CAAC,KAA1B,CAVA,CAAA;AAAA,UAWA,KAAI,CAAC,SAAL,CAAA,CAXA,CAAA;iBAYA,MAbF;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,EADe;IAAA,CA7BjB;AAAA,IA6CA,gBAAA,EAAkB,SAAC,KAAD,GAAA;aAChB,CAAA,SAAA,KAAA,GAAA;eAAA,SAAA,GAAA;AACE,UAAA,KAAI,CAAC,KAAK,CAAC,KAAX,GAAmB,KAAnB,CAAA;AAAA,UACA,KAAI,CAAC,SAAL,CAAA,CADA,CAAA;iBAEA,MAHF;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,EADgB;IAAA,CA7ClB;AAAA,IAmDA,WAAA,EAAa,SAAA,GAAA;AACX,UAAA,OAAA;AAAA,MAAA,OAAA,GAAU,EAAV,CAAA;AAEA,MAAA,IAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAjB,KAA2B,CAA9B;AAEE,QAAA,OAAA,GAAU,CAAC,OAAD,CAAV,CAFF;OAAA,MAGK,IAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAjB,KAA2B,IAAI,CAAC,KAAK,CAAC,MAAzC;AAAA;OAAA,MAAA;AAIH,QAAA,OAAA,GAAU,CAAC,CAAC,GAAF,CAAM,IAAI,CAAC,KAAK,CAAC,KAAjB,EAAwB,SAAC,IAAD,GAAA;iBAChC,WAAA,GAAc,IAAd,GAAqB,KADW;QAAA,CAAxB,CAAV,CAJG;OALL;AAAA,MAYA,OAAO,CAAC,IAAR,CAAa,cAAA,GAAiB,IAAI,CAAC,KAAK,CAAC,OAA5B,GAAsC,IAAnD,CAZA,CAAA;AAAA,MAaA,OAAO,CAAC,IAAR,CAAa,IAAI,CAAC,KAAK,CAAC,KAAX,GAAmB,oBAAhC,CAbA,CAAA;aAeA,eAAA,GAAkB,IAAI,CAAC,KAAK,CAAC,KAA7B,GAAqC,cAArC,GAAsD,IAAI,CAAC,MAAM,CAAC,QAAlE,GACE,SADF,GACc,OAAO,CAAC,IAAR,CAAa,OAAb,CADd,GACsC,iBAjB3B;IAAA,CAnDb;AAAA,IAsEA,SAAA,EAAW,SAAA,GAAA;AACT,MAAA,IAAI,CAAC,QAAL,CAAc;AAAA,QAAE,QAAA,EAAU,IAAZ;OAAd,CAAA,CAAA;aAEA,CAAC,CAAC,OAAF,CAAU,kDAAV,EACE;AAAA,QAAA,GAAA,EAAK,IAAI,CAAC,WAAL,CAAA,CAAL;AAAA,QACA,GAAA,EAAK,YADL;OADF,EAGE,CAAA,SAAA,KAAA,GAAA;eAAA,SAAC,gBAAD,GAAA;iBACA,CAAC,CAAC,OAAF,CAAU,kDAAV,EACE;AAAA,YAAA,GAAA,EAAK,8BAAA,GAAiC,IAAI,CAAC,MAAM,CAAC,MAA7C,GACH,gBADF;AAAA,YAEA,GAAA,EAAK,YAFL;WADF,EAIE,SAAC,cAAD,GAAA;mBACA,KAAI,CAAC,QAAL,CACE;AAAA,cAAA,QAAA,EAAU,KAAV;AAAA,cACA,QAAA,EAAU,gBAAgB,CAAC,IAD3B;AAAA,cAEA,MAAA,EAAQ,cAAc,CAAC,IAFvB;aADF,EADA;UAAA,CAJF,EADA;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,CAHF,EAHS;IAAA,CAtEX;AAAA,IAuFA,MAAA,EAAQ,SAAA,GAAA;AACN,UAAA,qBAAA;AAAA,MAAA,KAAA,GAAQ,CAAC,CAAC,GAAF,CAAM,IAAI,CAAC,UAAX,EAAuB,CAAA,SAAA,KAAA,GAAA;eAAA,SAAC,IAAD,EAAO,IAAP,GAAA;AAC7B,cAAA,WAAA;AAAA,UAAA,GAAA,GAAM,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAjB,CAAyB,IAAzB,CAAN,CAAA;AAAA,UACA,MAAA,GAAS,GAAA,KAAO,CAAA,CADhB,CAAA;iBAEA,KAAK,CAAC,aAAN,CAAoB,QAApB,EAA8B;AAAA,YAAC,KAAA,EAAQ,IAAT;AAAA,YAAgB,MAAA,EAAQ,QAAxB;AAAA,YAAkC,SAAA,EAAY,KAAI,CAAC,eAAL,CAAqB,IAArB,CAA9C;AAAA,YAA2E,WAAA,EAAc,iBAAA,GAAoB,CAAI,MAAH,GAAe,SAAf,GAA8B,EAA/B,CAA7G;WAA9B,EAAiL,KAAK,CAAC,aAAN,CAAoB,MAApB,EAA4B;AAAA,YAAC,WAAA,EAAc,sBAAA,GAAyB,IAAxC;WAA5B,CAAjL,EAA8P,KAAK,CAAC,aAAN,CAAoB,MAApB,EAA4B;AAAA,YAAC,WAAA,EAAa,MAAd;WAA5B,EAAoD,IAApD,CAA9P,EAH6B;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,CAAvB,CAAR,CAAA;AAAA,MAKA,MAAA,GAAS,IAAI,CAAC,MAAM,CAAC,GAAZ,CAAgB,CAAA,SAAA,KAAA,GAAA;eAAA,SAAC,KAAD,GAAA;AACvB,cAAA,MAAA;AAAA,UAAA,MAAA,GAAS,KAAA,KAAS,KAAI,CAAC,KAAK,CAAC,KAA7B,CAAA;iBACA,KAAK,CAAC,aAAN,CAAoB,QAApB,EAA8B;AAAA,YAAC,KAAA,EAAQ,KAAT;AAAA,YAAiB,MAAA,EAAQ,QAAzB;AAAA,YAAmC,KAAA,EAAO,QAA1C;AAAA,YAAoD,SAAA,EAAY,KAAI,CAAC,gBAAL,CAAsB,KAAtB,CAAhE;AAAA,YAA+F,WAAA,EAAc,mCAAA,GAAsC,CAAI,MAAH,GAAe,SAAf,GAA8B,EAA/B,CAAnJ;WAA9B,EAAwN;AAAA,YAAE,OAAA,KAAF;WAAxN,EAFuB;QAAA,EAAA;MAAA,CAAA,CAAA,CAAA,IAAA,CAAhB,CALT,CAAA;AASA,MAAA,IAAG,IAAI,CAAC,KAAK,CAAC,QAAd;AACE,QAAA,MAAA,GAAS,EAAT,CADF;OAAA,MAAA;AAGE,QAAA,MAAA,GAAS,CAAC,CAAC,GAAF,CAAM,IAAI,CAAC,KAAK,CAAC,QAAjB,EAA2B,CAAA,SAAA,KAAA,GAAA;iBAAA,SAAC,QAAD,GAAA;AAClC,gBAAA,sBAAA;AAAA,YAAA,IAAA,GAAO,QAAS,CAAA,CAAA,CAAhB,CAAA;AAAA,YACA,KAAA,GAAQ,CAAC,CAAC,IAAF,CAAO,KAAI,CAAC,KAAK,CAAC,MAAlB,EAA0B,SAAC,KAAD,GAAA;qBAAW,KAAM,CAAA,CAAA,CAAN,KAAY,KAAvB;YAAA,CAA1B,CADR,CAAA;AAAA,YAEA,SAAA,GAAe,KAAH,GAAc,KAAM,CAAA,CAAA,CAApB,GAA4B,IAFxC,CAAA;mBAIA,KAAK,CAAC,aAAN,CAAoB,IAApB,EAA0B;AAAA,cAAC,KAAA,EAAQ,QAAS,CAAA,CAAA,CAAlB;AAAA,cAAuB,WAAA,EAAa,iBAApC;aAA1B,EACE,CAAI,SAAH,GAAkB,KAAK,CAAC,aAAN,CAAoB,GAApB,EAAyB;AAAA,cAAC,QAAA,EAAU,QAAX;AAAA,cAAqB,WAAA,EAAa,WAAlC;AAAA,cAA+C,MAAA,EAAS,SAAxD;aAAzB,EACnB,KAAK,CAAC,aAAN,CAAoB,MAApB,EAA4B;AAAA,cAAC,WAAA,EAAa,0CAAd;aAA5B,CADmB,CAAlB,GAAA,MAAD,CADF,EAGE,KAAK,CAAC,aAAN,CAAoB,MAApB,EAA4B;AAAA,cAAC,WAAA,EAAa,wBAAd;aAA5B,EAAsE,IAAI,CAAC,YAAa,CAAA,QAAS,CAAA,CAAA,CAAT,CAAxF,CAHF,EAIE,KAAK,CAAC,aAAN,CAAoB,MAApB,EAA4B;AAAA,cAAC,WAAA,EAAc,sBAAA,GAAyB,IAAI,CAAC,UAAW,CAAA,QAAS,CAAA,CAAA,CAAT,CAAxD;AAAA,cAAuE,aAAA,EAAe,MAAtF;aAA5B,CAJF,EAKG,QAAS,CAAA,CAAA,CALZ,EALkC;UAAA,EAAA;QAAA,CAAA,CAAA,CAAA,IAAA,CAA3B,CAAT,CAHF;OATA;aAyBA,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EACE,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAAA,QAAC,WAAA,EAAa,aAAd;OAA3B,EACI,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAAA,QAAC,WAAA,EAAa,WAAd;OAA3B,EACI,KAAK,CAAC,aAAN,CAAoB,IAApB,EAA0B,IAA1B,EAAkC,IAAI,CAAC,KAAK,CAAC,OAA7C,CADJ,EAEI,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAAA,QAAC,IAAA,EAAM,OAAP;AAAA,QAAgB,WAAA,EAAa,WAA7B;AAAA,QAA0C,MAAA,EAAQ,SAAlD;AAAA,QAA6D,YAAA,EAAc,aAA3E;OAA3B,EACK,KADL,CAFJ,CADJ,CADF,EAUE,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAAA,QAAC,WAAA,EAAa,WAAd;OAA3B,EACI,KAAK,CAAC,aAAN,CAAoB,KAApB,EAA2B;AAAA,QAAC,WAAA,EAAa,YAAd;OAA3B,EAAyD,MAAzD,CADJ,EAEI,KAAK,CAAC,aAAN,CAAoB,IAApB,EAA0B;AAAA,QAAC,IAAA,EAAM,QAAP;AAAA,QAAiB,WAAA,EAAa,YAA9B;OAA1B,EAAwE,MAAxE,CAFJ,CAVF,EA1BM;IAAA,CAvFR;GADS,CANX,CAAA;SAwIA,KAAK,CAAC,MAAN,CAAa,KAAK,CAAC,aAAN,CAAoB,QAApB,EAA8B,IAA9B,CAAb,EAAkD,QAAQ,CAAC,cAAT,CAAwB,UAAxB,CAAlD,EAzI4B;AAAA,CAA9B,CAFA,CAAA","file":"home.js","sourceRoot":"/source/","sourcesContent":["'use strict'\n\nwindow.jQuery(document).ready ($) ->\n  googleApiKey = window.googleApiKey\n  store = window.store\n  _ = window._\n  data = window.data\n  React = window.React\n\n  Schedule = React.createClass\n    componentDidMount: ->\n      this.fetchData()\n      null\n\n    componentDidUpdate: ->\n      if this.state.fetching\n        this.state.spinner = new window.Spinner().spin(document.getElementById('plants'))\n      else\n        if this.state.spinner\n          this.state.spinner.stop()\n          this.state.spinner = null\n      null\n\n    componentWillUnmount: ->\n      if this.state.spinner\n        this.state.spinner.stop()\n      null\n\n    getInitialState: ->\n      today = new Date()\n\n      types: store.get('types', _.clone(data.types))\n      climate: store.get('climate', 'Dry Summer - Wet Winter')\n      month: data.months[today.getMonth()]\n      fetching: true\n      plants: []\n      schedule: []\n      spinner: null\n\n    handleTypeClick: (type) ->\n      =>\n        pos = this.state.types.indexOf(type)\n        if pos == -1\n          this.state.types.push(type)\n        else\n          # You can't disable all types\n          # Do nothing if there is only one left\n          return false if this.state.types.length == 1\n\n          this.state.types.splice(pos, 1)\n\n        store('types', this.state.types)\n        this.fetchData()\n        false\n\n    handleMonthClick: (month) ->\n      =>\n        this.state.month = month\n        this.fetchData()\n        false\n\n    generateSql: ->\n      filters = []\n\n      if this.state.types.length == 0\n        # If no types selected, no rows returned\n        filters = ['1 = 0']\n      else if this.state.types.length == data.types.length\n        # If all types selected, all rows returned (no filter)\n      else\n        # Filter one or the other type\n        filters = _.map this.state.types, (type) ->\n          'Type = \\'' + type + '\\''\n\n      filters.push('Climate = \\'' + this.state.climate + '\\'')\n      filters.push(this.state.month + ' NOT EQUAL TO \\'\\'')\n\n      'select Name, ' + this.state.month + ', Type FROM ' + data.tables.schedule +\n        ' WHERE ' + filters.join(' AND ') + ' ORDER BY Name'\n\n    fetchData: ->\n      this.setState({ fetching: true })\n\n      $.getJSON 'https://www.googleapis.com/fusiontables/v1/query',\n        sql: this.generateSql(),\n        key: googleApiKey\n      , (scheduleResponse) =>\n        $.getJSON 'https://www.googleapis.com/fusiontables/v1/query',\n          sql: 'select Name, Wikipedia FROM ' + data.tables.plants +\n            ' ORDER BY Name',\n          key: googleApiKey\n        , (plantsResponse) =>\n          this.setState\n            fetching: false,\n            schedule: scheduleResponse.rows,\n            plants: plantsResponse.rows\n\n    render: ->\n      types = _.map data.glyphicons, (icon, name) =>\n        pos = this.state.types.indexOf(name)\n        active = pos != -1\n        <button key={name} type=\"button\" onClick={this.handleTypeClick(name)} className={'btn btn-default' + (if active then ' active' else '')}><span className={'glyphicon glyphicon-' + icon}></span><span className=\"type\">{name}</span></button>\n\n      months = data.months.map (month) =>\n        active = month == this.state.month\n        <button key={month} type=\"button\" ref=\"button\" onClick={this.handleMonthClick(month)} className={'col-xs-2 col-md-1 btn btn-default' + (if active then ' active' else '')}>{{ month }}</button>\n\n      if this.state.fetching\n        plants = ''\n      else\n        plants = _.map this.state.schedule, (schedule) =>\n          name = schedule[0]\n          plant = _.find this.state.plants, (plant) -> plant[0] == name\n          wikipedia = if plant then plant[1] else null\n\n          <li key={schedule[0]} className=\"list-group-item\">\n            {if wikipedia then <a target=\"_blank\" className=\"wikipedia\" href={wikipedia}>\n            <span className=\"glyphicon glyphicon-info-sign pull-right\"></span></a>}\n            <span className=\"instruction pull-right\">{data.instructions[schedule[1]]}</span>\n            <span className={'glyphicon glyphicon-' + data.glyphicons[schedule[2]]} aria-hidden=\"true\"></span>\n            {schedule[0]}\n          </li>\n\n      <div>\n        <div className=\"page-header\">\n            <div className=\"container\">\n                <h2>{ this.state.climate }</h2>\n                <div id=\"types\" className=\"btn-group\" role=\"toolbar\" aria-label=\"plant types\">\n                    {types}\n                </div>\n            </div>\n        </div>\n\n        <div className=\"container\">\n            <div className=\"months row\">{months}</div>\n            <ul id=\"plants\" className=\"list-group\">{plants}</ul>\n        </div>\n      </div>\n\n  React.render <Schedule />, document.getElementById('schedule')\n"]}